多路查找树

多叉树
1.在二叉树中，每个结点有数据项，最多有两个子结点。如果允许每个结点可以有更多的数据项和更多的子结点，就是多叉树
2.后面我们讲解的2-3树，2-3-4树就是多叉树，多叉树通过重新组织结点，减少树的高度，能对二叉树进行优化。
	
2-3树
2结点：数据项有1个，子结点有2个
3结点：数据项有2个，子结点有3个

1.2-3树的所有叶子结点都在同一层。（只要是B树都满足这个条件）
2.有两个子结点的结点叫二结点，二结点要么没有子结点，要么有两个子结点。
3.有三个子结点的结点叫三结点，三结点要么没有子结点，要么有三个子结点。
4.2-3树是由二结点和三结点构成的树

插入规则：
1.2-3树的所有叶子结点都在同一层。（只要是B树都满足这个条件）
2.有两个子结点的结点叫二结点，二结点要么没有子结点，要么有两个子结点。
3.有三个子结点的结点叫三结点，三结点要么没有子结点，要么有三个子结点。
4.当按照规则插入一个数到某个结点时，不能满足上面三个要求，就需要拆，先向上拆，如果上层满，则拆本层，拆后仍然需要满足上面3个条件
5.对于三结点的子树的值大小仍然遵守（BST二叉排序树）的规则

除了2-3树外，还有2-3-4树等，概念和2-3类似，也是一种B树

B树
B-tree树即B树，B即Banlanced，平衡的疑似。有人把B-tree翻译成B-树，容易让人产生误解。会以为B-tree是一种树，而B树又是另一种树。实际上，B-tree就是指B树。

B树的说明：
1.B树的阶：结点的最多子结点个数。比如2-3树的阶是3，2-3-4树的阶是4
2.B-树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点
3.关键字集合分布在整棵树中，即叶子结点和非叶子结点都存放数据
4.搜索有可能在非叶子结点结束
5.其搜索性能等价于在关键字全集内左一次二分查找

B+树
1.B+树的搜索于B树也基本相同，区别是B+树只有达到叶子结点才命中（B树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找
2.所有关键字都出现在叶子结点的链表中（即数据只能在叶子结点【也叫稠密索引】），且链表中的关键字（数据）恰好是有序的
3.不可能在非叶子结点命中
4.非叶子结点相当于叶子结点的索引（稀疏索引），叶子结点相当于存储（关键字）数据的数据层
5.更适合文件索引系统
6.B树和B+树各有自己的应用场景，不能说B+树完全比B树好，反之亦然。

B*树
B*树是B+树的变体，在B+树的非根和非叶子结点再增加兄弟指针

B*树的说明：
1.B*树定义了非叶子结点关键字个数至少为(2/3)*M，即块的最低使用率为2/3，而B+树的块的最低使用率为1/2
2.从第1个特点我们可以看出，B*树分配新结点的概率比B+树要低，空间使用率高。